!function(){angular.module("starter",["ionic","starter.controllers","starter.services","angularMoment","ngCordova","firebase"]).run(["$ionicPlatform","$state","ConfigurationService","UserService","EntityService",function(e,t,o,n,r){e.on("pause",function(){Firebase.goOffline()}),e.on("resume",function(){Firebase.goOnline()}),e.ready(function(){window.cordova&&window.cordova.plugins&&window.cordova.plugins.Keyboard&&(setTimeout(function(){navigator.splashscreen.hide()},50),cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault();var e=!1;if(window.cordova&&"undefined"!=typeof window.plugins.OneSignal){var s=function(o){var n={conversationId:o.additionalData.conversationId,userName:o.additionalData.userName,subjectName:o.additionalData.subjectName,fbPhotoUrl:o.additionalData.fbPhotoUrl};e=!0,r.setMessageDetails(n),t.go("chat")};window.plugins.OneSignal.init("ee6f85c1-a2ff-4d1b-9fa6-29dd4cc306ef",{googleProjectNumber:"238478083352"},s),window.plugins.OneSignal.enableNotificationsWhenActive(!1)}var i=o.UserDetails();i?n.CheckUser().then(function(o){if(o.isNeedLogin===!1){var n=new Firebase("https://mustknow.firebaseIO.com");n.authWithCustomToken(o.fireToken,function(o,n){o?console.log("Login Failed!",o):e||t.go("tab.subjects")})}else t.go("login")},function(e){t.go("login")}):t.go("login")})}]).factory("focus",["$timeout","$window",function(e,t){return function(o){e(function(){var e=t.document.getElementById(o);e&&e.focus()})}}]).directive("eventFocus",["focus",function(e){return function(t,o,n){o.on(n.eventFocus,function(){e(n.eventFocusId)}),t.$on("$destroy",function(){element.off(n.eventFocus)})}}]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("tab",{url:"/tab",abstract:!0,templateUrl:"templates/tabs/html/tabs.html"}).state("login",{url:"/login",templateUrl:"templates/login/html/login.html",controller:"loginCtrl"}).state("chat",{url:"/chat",templateUrl:"templates/chat/html/chat.html",controller:"chatCtrl"}).state("userProfile",{url:"/userProfile/:userId/:first_name",templateUrl:"templates/profile/html/userProfile.html",controller:"userProfileCtrl"}).state("blockedUsers",{url:"/blockedUsers",templateUrl:"templates/blockedUsers/html/blockedUsers.html",controller:"blockedUsersCtrl"}).state("tab.subjects",{url:"/subjects",views:{"tab-subjects":{templateUrl:"templates/subjects/html/subjects.html",controller:"subjectsCtrl"}}}).state("tab.addSubject-s1",{url:"/addSubject-s1",views:{"tab-addSubject":{templateUrl:"templates/subjects/html/addSubject-s1.html",controller:"addSubjectCtrl"}}}).state("tab.addSubject-s2",{url:"/addSubject-s2/:categoryId",views:{"tab-addSubject":{templateUrl:"templates/subjects/html/addSubject-s2.html",controller:"addSubjectCtrl"}}}).state("tab.messages",{url:"/messages",views:{"tab-messages":{templateUrl:"templates/messages/html/messages.html",controller:"messagesCtrl"}}}).state("tab.myProfile",{url:"/myProfile",views:{"tab-myProfile":{templateUrl:"templates/profile/html/myProfile.html",controller:"myProfileCtrl"}}})}])}();var common=new function(){this.indexOfConv=function(e,t){for(var o=0;o<e.length;o++)if(e[o].conversationId===t)return o;return-1}},appControllers=angular.module("starter.controllers",[]),appServices=angular.module("starter.services",[]);appControllers.controller("NewMessagesCtrl",["$scope","MessagesService",function(e,t){e.checkUndreadMessage=function(){return t.checkUndreadMessage()}}]),appControllers.controller("tabsCtrl",["$scope","MessagesService",function(e,t){e.checkUndreadMessage=function(){return t.checkUndreadMessage()}}]),appControllers.controller("AppCtrl",["$scope","$state","$ionicHistory",function(e,t,o){e.goBack=function(){t.current.name.indexOf("chat")>=0?o.backView()?o.goBack():t.go("tab.messages"):o.goBack()}}]),appServices.factory("favoriteService",["$state","$rootScope","$ionicPlatform","$ionicHistory",function(e,t,o,n){var r=[];return{getFavorites:function(){return r.length>0?r:r=angular.fromJson(window.localStorage.favorites)||[]},addToFavorites:function(e){r.push(e),window.localStorage.favorites=angular.toJson(r)}}}]),appServices.factory("backcallFactory",["$state","$rootScope","$ionicPlatform","$ionicHistory","$timeout",function(e,t,o,n,r){var s={};return s.backCall=function(){var s=0;o.registerBackButtonAction(function(){"tab.subjects"===e.current.name||"tab.addSubject-s1"===e.current.name||"tab.messages"===e.current.name||"tab.myProfile"===e.current.name||"login"===e.current.name?0==s?(s++,window.plugins.toast.showShortBottom("press back button again to exit."),r(function(){s=0},3e3)):navigator.app.exitApp():e.current.name.indexOf("chat")>=0?e.go("tab.messages"):null!=n.viewHistory().backView?n.goBack():t.TabName?(e.go(t.TabName),n.clearHistory(),n.clearCache()):e.go("tab.subjects")},100)},s}]),function(){appServices.factory("ChatService",["$q","$timeout","SubjectService","$rootScope","$ionicScrollDelegate","$firebaseObject","$firebaseArray","ConfigurationService","NotificationService","$http",function(e,t,o,n,r,s,i,a,c,l){var u,f,d,g,d,m,b,p,v,h,S,w,j=[],k=a.UserDetails(),U=k.first_name+" "+k.last_name,$=!1,y=function(){r.scrollBottom(!1)};return{getMessages:function(){return j},setMessages:function(e){u=e,d=u.split("-")[0],g=u.split("-")[1],f=k._id+"-"+g,b="https://mustknow.firebaseIO.com/chats/"+d+"/"+f,m="https://mustknow.firebaseIO.com/chats/"+k._id+"/"+u,p=new Firebase("https://mustknow.firebaseIO.com/conversationOnline/"+k._id),v=new Firebase("https://mustknow.firebaseIO.com/conversationOnline/"+d),S=new Firebase(b+"/read"),h=new Firebase(m+"/read"),h.set(!0),p.set({conversationId:e});var t="https://mustknow.firebaseIO.com/chats/"+d+"/blocked/"+k._id,o=new Firebase(t);o.on("value",function(e){$=!!e.val()});var r=new Firebase("https://mustknow.firebaseIO.com/presence/"+d);r.on("value",function(e){e.val()&&"online"==e.val()?n.$broadcast("sendUserOnlineEvent",!0):n.$broadcast("sendUserOnlineEvent",!1)});var s=new Firebase("https://mustknow.firebaseIO.com/chats/"+k._id+"/"+u),a=new Firebase("https://mustknow.firebaseIO.com/chats/"+k._id+"/"+u+"/messages"),c=i(a);c.$loaded(function(e){j=e,n.$broadcast("sendChatEvent","sendChatEvent")}),s.on("value",function(e){w=!1;var t=[];t=e.val().messages;var o=0,n=0;angular.forEach(t,function(e,r){3==o&&o==n&&(w=!0),4==o&&t[r].sender!=k._id&&(w=!1),t[r].sender==k._id&&n++,o++}),y()})},blockUser:function(e){d=u.split("-")[0];var t=new Firebase("https://mustknow.firebaseIO.com/chats/"+k._id+"/blocked/"+d);t.set({userName:e.userName,fbPhotoUrl:e.fbPhotoUrl,userId:d})},sendMessage:function(e,t){if(w)return void a.showAlert();var n,r,i=!1;if(f=k._id+"-"+g,j&&0!=j.length||(i=!0),i){o.Interested(g).then(function(e){},function(e){}),r=new Firebase(b),n=new Firebase(m);var l={userName:U,subjectName:t.subjectName,fbPhotoUrl:k.fbPhotoUrl,desc:t.desc};n.set({userName:t.userName,subjectName:t.subjectName,fbPhotoUrl:t.fbPhotoUrl,read:!0,desc:t.desc}),$&&(l.read=!0),r.set(l),i=!1}r=new Firebase(b+"/messages"),n=new Firebase(m+"/messages");var u=r.push(),p=n.push(),h=new Date,y={body:e,sender:k._id,create_date:h.toJSON(),date_string:h.toLocaleDateString()};if(p.set(y),!$){u.set(y);var C=s(v);C.$loaded(function(e){e?e.conversationId!==f?S.set(!1):S.set(!0):S.set(!1)});var D=new Firebase("https://mustknow.firebaseIO.com/presence/"+d),I=s(D);I.$loaded(function(o){if(o&&"offline"==o.$value){var n={user:d,message:e,conversationId:f,userName:U,subjectName:t.subjectName,fbPhotoUrl:k.fbPhotoUrl,desc:t.desc};c.SendMessage(n).then(function(e){},function(e){})}})}},ReportUser:function(t){var o=e.defer();return l.post(a.ServerUrl()+"/api/users/report",t,{headers:{"access-token":a.UserDetails().token}}).success(function(e){o.resolve(e)}).error(function(e,t){o.reject(e)}),o.promise},scrollBottom:y}}])}(),function(){appServices.factory("ConfigurationService",["$ionicPopup",function(e){return{ServerUrl:function(){return"http://localhost:3000"},CategoriesUrl:function(){return"https://chatad.herokuapp.com/categories/"},UserDetails:function(){return this.userDetails||window.localStorage.user&&(this.userDetails=angular.fromJson(window.localStorage.user)),this.userDetails},RefreshUserDetails:function(){return window.localStorage.user&&(this.userDetails=angular.fromJson(window.localStorage.user)),this.userDetails},Notification_token:function(){return this.notification_token||window.localStorage.notification_token&&(this.notification_token=window.localStorage.notification_token),this.notification_token},MyFilter:function(){this.myFilter||window.localStorage.myFilter&&(this.myFilter=angular.fromJson(window.localStorage.myFilter));var e={};return angular.copy(this.myFilter,e),e},SetMyFilter:function(e){e&&(window.localStorage.myFilter=angular.toJson(e),this.myFilter=e)},SetNotification_token:function(e){e&&(window.localStorage.notification_token=angular.toJson(e),this.notification_token=e)},showAlert:function(){var t=e.alert({title:"info",template:"wiat for the other user to answer you"});t.then(function(e){console.log("Thank you for not eating my delicious ice cream cone")})},LogOut:function(){delete this.notification_token,delete this.myFilter,delete this.userDetails}}}])}(),function(){appServices.factory("EntityService",["ConfigurationService","$q",function(e,t){var o=null,n=null,r=function(e,t){for(var o=0;o<e.length;o++)e[o]._id==t._id&&e.splice(o,1)},s=function(e){o=e},i=function(){return o},a=function(e){n=e},c=function(){return n};return{deleteFromArray:r,setProfile:s,getOtherProfile:i,setMessageDetails:a,getMessageDetails:c}}])}(),function(){appServices.factory("MessagesService",["$rootScope","$ionicScrollDelegate","$firebaseObject","ConfigurationService",function(e,t,o,n){var r=[],s=n.UserDetails(),i=function(){var t=new Firebase("https://mustknow.firebaseIO.com/chats/"+s._id);t.orderByValue().on("value",function(t){r=[],angular.forEach(t.val(),function(t,n){var i=n;if(t.messages){var a=Object.getOwnPropertyNames(t.messages),c=a[a.length-1],l=t.messages[c].body,u=i.split("-")[0],f=!1;t.read&&(f=t.read);var d=common.indexOfConv(r,i),g={conversationId:i,lastMessage:l,lastMessageKey:c,subjectName:t.subjectName,fbPhotoUrl:t.fbPhotoUrl,userName:t.userName,readMessage:f,desc:t.desc};d===-1?r.push(g):r[d]=g;var m=new Firebase("https://mustknow.firebaseIO.com/presence/"+u);m.on("value",function(t){var n=!0;"offline"==t.val()&&(n=!1);var a="https://mustknow.firebaseIO.com/chats/"+u+"/blocked/"+s._id,c=new Firebase(a),l=o(c);l.$loaded(function(t){t.userId&&(n=!1);var o=common.indexOfConv(r,i);r[o].online=n,e.$broadcast("sendMessagesEvent","sendMessagesEvent")})})}})})};return i(),{getMessages:function(){return r},setMessages:function(){i()},checkUndreadMessage:function(){for(var e=0;e<r.length;e++)if(r[e].readMessage===!1)return!0;return!1}}}])}(),function(){appServices.factory("NotificationService",["$http","$log","$q","ConfigurationService",function(e,t,o,n){return{SendMessage:function(t){var r=o.defer();return e.post(n.ServerUrl()+"/api/notification",t,{headers:{"access-token":n.UserDetails().token}}).success(function(e){r.resolve(e)}).error(function(e,t){r.reject(e)}),r.promise}}}])}(),function(){appServices.factory("SubjectService",["$http","$log","$q","ConfigurationService","$cordovaGeolocation",function(e,t,o,n,r){return{TimeToUpdateFromServer:9e5,GetCategories:function(){var t=o.defer();return!n.categories||n.categories.datetime&&(new Date).getTime()-n.categories.datetime.getTime()>this.TimeToUpdateFromServer?e.get(n.ServerUrl()+"/api/subjects/categories",{headers:{"access-token":n.UserDetails().token}}).success(function(e){n.categories={data:e,datetime:new Date},t.resolve(e)}).error(function(e,o){t.reject(e)}):t.resolve(n.categories.data),t.promise},GetSubjects:function(t,s,i){function a(){e.post(n.ServerUrl()+"/api/subjects/filter?userSubjects="+t+"&userId="+i,l,{headers:{"access-token":n.UserDetails().token}}).success(function(e){c.resolve(e)}).error(function(e,t){c.reject(e)})}var c=o.defer();void 0==i&&(i=null);var l=n.MyFilter();if(l.limit=s.limit,l.skip=s.skip,l.gender||(l={nearMe:!1,gender:"both",categories:[]},n.SetMyFilter(l)),l.nearMe){var u={timeout:1e4,enableHighAccuracy:!1};r.getCurrentPosition(u).then(function(e){var t=e.coords.latitude,o=e.coords.longitude;l.locationCoords=[t,o],a()},function(e){l.locationCoords=[],a()})}else l.locationCoords=[],a();return c.promise},GetMySubjects:function(t,r){function s(){e.post(n.ServerUrl()+"/api/subjects/filter?userSubjects=true&status="+r+"&userId="+t,{},{headers:{"access-token":n.UserDetails().token}}).success(function(e){i.resolve(e)}).error(function(e,t){i.reject(e)})}var i=o.defer();return void 0==t&&(t=null),s(),i.promise},Interested:function(t){var r=o.defer();return e.post(n.ServerUrl()+"/api/subjects/interested",{subjectId:t},{headers:{"access-token":n.UserDetails().token}}).success(function(e){r.resolve(e)}).error(function(e,t){r.reject(e)}),r.promise},ChangeStatus:function(t,r){var s=o.defer();return e.post(n.ServerUrl()+"/api/subjects/status",{_id:t._id,status:r},{headers:{"access-token":n.UserDetails().token}}).success(function(e){s.resolve(e)}).error(function(e,t){s.reject(e)}),s.promise},CreateSubject:function(t){function s(){e.post(n.ServerUrl()+"/api/subjects",t,{headers:{"access-token":n.UserDetails().token}}).success(function(e){i.resolve(e)}).error(function(e,t){i.reject(e)})}var i=o.defer(),a={timeout:1e4,enableHighAccuracy:!1};return r.getCurrentPosition(a).then(function(e){var o=e.coords.latitude,n=e.coords.longitude;t.locationCoords=[o,n],s()},function(e){t.locationCoords=[],s()}),i.promise},DeleteSubjects:function(t){var r=o.defer();return e.delete(n.ServerUrl()+"/api/subjects?_id="+t._id,{headers:{"access-token":n.UserDetails().token}}).success(function(e){r.resolve(e)}).error(function(e,t){r.reject(e)}),r.promise},UpdateSubject:function(t){var r=o.defer();return e.post(n.ServerUrl()+"/api/subjects",t,{headers:{"access-token":n.UserDetails().token}}).success(function(e){r.resolve(e)}).error(function(e,t){r.reject(e)}),r.promise}}}])}(),function(){appServices.factory("UserService",["$http","$log","$q","$cordovaFacebook","ConfigurationService",function(e,t,o,n,r){var s={};return{CreateUser:function(t){var n=o.defer();return e.post(r.ServerUrl()+"/api/users",t,{headers:{"Content-Type":"application/json"}}).success(function(e){n.resolve(e)}).error(function(e,t){n.reject(e)}),n.promise},LogOut:function(){var t=o.defer();return e.get(r.ServerUrl()+"/api/users/logOut",{headers:{"Content-Type":"application/json","access-token":r.UserDetails().token}}).success(function(e){t.resolve(e)}).error(function(e,o){t.reject(e)}),t.promise},GetUser:function(t){var n=o.defer();return e.get(r.ServerUrl()+"/api/users/"+t,{headers:{"access-token":r.UserDetails().token}}).success(function(e){n.resolve(e)}).error(function(e,t){n.reject(e)}),n.promise},CheckUser:function(t){var n=o.defer();return e.get(r.ServerUrl()+"/api/users",{headers:{"access-token":r.UserDetails().token}}).success(function(e){n.resolve(e)}).error(function(e,t){n.reject(e)}),n.promise},FBlogin:function(){var e=o.defer();return n.login(["public_profile","email","user_friends","user_birthday"]).then(function(t){e.resolve(t)},function(t){alert(JSON.stringify(t)),e.reject(t)}),e.promise},RegisterNotification:function(t){var n=o.defer();return e.post(r.ServerUrl()+"/api/users/notification",{notification_token:t},{headers:{"access-token":r.UserDetails().token}}).success(function(e){n.resolve(e)}).error(function(e,t){n.reject(e)}),n.promise},SetUserProfile:function(e){var t=e.conversationId.split("-")[0];s.userId=t,s.first_name=e.userName,s.fbPhotoUrl=e.fbPhotoUrl},GetUserProfile:function(){return s}}}])}(),function(){appControllers.controller("blockedUsersCtrl",["$scope","$rootScope","$state","$ionicPopup","$stateParams","$filter","$firebaseArray","$mdBottomSheet","$mdDialog","$mdToast","$ionicHistory","SubjectService","ConfigurationService","Firebase",function(e,t,o,n,r,s,i,a,c,l,u,f,d,g){e.isExpanded=!0,t.isHeaderExpanded=!0,e.showConfirm=function(t){var o=n.confirm({title:"Unblock User",template:"Are you sure you want to remove"+t.userName+" from your blocked users?"});o.then(function(o){if(o){var n=new g("https://mustknow.firebaseIO.com/chats/"+e.userDetails._id+"/blocked/"+t.userId);n.remove(),console.log("You are sure")}else console.log("You are not sure")})},e.userDetails=d.UserDetails(),e.initialForm=function(){var t=new g("https://mustknow.firebaseIO.com/chats/"+e.userDetails._id+"/blocked/");e.blockedUsers=i(t)},e.initialForm()}])}(),function(){appControllers.controller("chatCtrl",["$scope","$ionicPopover","$timeout","$ionicScrollDelegate","$rootScope","$state","$ionicPopup","ConfigurationService","ChatService","UserService","EntityService",function(e,t,o,n,r,s,i,a,c,l,u){var f=new Date;e.dateString=f.toLocaleDateString(),e.isExpanded=!0,r.isHeaderExpanded=!0,e.chatDetails=u.getMessageDetails(),e.conversationId=e.chatDetails.conversationId,e.messages=[];var d=e.conversationId.split("-")[0];e.bb=function(){console.log(666)},e.userDetails=a.UserDetails(),c.setMessages(e.conversationId),e.messages=c.getMessages(),o(function(){c.scrollBottom()},100),window.addEventListener("native.keyboardshow",function(){o(function(){n.scrollBottom(!1)},300)}),r.$on("sendChatEvent",function(t,o){e.messages=c.getMessages(),f=new Date,e.dateString=f.toLocaleDateString(),e.$$phase||e.$apply()});var g="https://mustknow.firebaseIO.com/chats/"+e.userDetails._id+"/blocked/"+d,m=new Firebase(g);m.on("value",function(t){t.val()?(e.disableSend=!0,e.sendInputPlaceHolder="this user is blocked"):(e.disableSend=!1,e.sendInputPlaceHolder="Message")}),e.blockUser=function(){var t=i.confirm({title:"Block User",template:"Are you sure you want to block "+e.chatDetails.userName+" ?",buttons:[{text:"Cancel"},{text:"<b>Block</b>",type:"button-positive",onTap:function(e){return"sss"}}]});t.then(function(t){t?(c.blockUser(e.chatDetails),s.go("tab.messages"),e.popover.remove(),console.log("You are sure")):console.log("You are not sure")})},e.reportUser=function(){e.data={is_toBlocked:!0,reason:""};var t=i.show({title:"Report User",template:'<textarea cols="4" ng-model="data.reason" placeholder="Give us more details"></textarea>  <ion-checkbox ng-model="data.is_toBlocked" >Also block this user ? </ion-checkbox>',scope:e,buttons:[{text:"Cancel"},{text:"<b>Report</b>",type:"button-positive",onTap:function(t){return{is_toBlocked:e.data.is_toBlocked,report:{user:e.chatDetails.conversationId.split("-")[1],reason:e.data.reason}}}}]});t.then(function(t){t?(c.ReportUser(t.report),t.is_toBlocked&&c.blockUser(e.chatDetails),s.go("tab.messages"),e.popover.remove(),console.log("You are sure")):console.log("You are not sure")})},e.$on("$stateChangeStart",function(t,o,n,r,s,i){conversationUserRef=new Firebase("https://mustknow.firebaseIO.com/conversationOnline/"+e.userDetails._id),conversationUserRef.remove()}),e.messageIsMine=function(t){return e.userDetails._id===t},e.getBubbleClass=function(t){var o="from-them";return e.messageIsMine(t)&&(o="from-me"),o},e.goToUserProfile=function(){l.SetUserProfile(e.chatDetails),s.go("app.userProfile",{userId:d})},e.sendMessage=function(t){f=new Date,e.dateString=f.toLocaleDateString(),c.sendMessage(t,e.chatDetails),e.data.message=""},t.fromTemplateUrl("templates/shared/drop-down-menu.html",{scope:e}).then(function(t){e.popover=t})}]),appControllers.controller("OnlineUserCtrl",["$scope","$firebaseObject","ConfigurationService","EntityService",function(e,t,o,n){var r=o.UserDetails(),s=n.getMessageDetails(),i=s.conversationId,a=i.split("-")[0],c=new Firebase("https://mustknow.firebaseIO.com/presence/"+a),l="https://mustknow.firebaseIO.com/chats/"+a+"/blocked/"+r._id,u=new Firebase(l),f=t(u);f.$loaded(function(t){t.userId?e.isUserOnline=!1:c.on("value",function(t){t.val()&&"online"==t.val()?e.isUserOnline=!0:e.isUserOnline=!1})})}])}(),function(){appControllers.controller("loginCtrl",["$scope","$state","UserService","$timeout",function(e,t,o,n){e.fbLogin=function(){if(console.log("fblogin"),window.cordova)o.FBlogin().then(function(e){window.localStorage.fbData=angular.toJson(e.authResponse);var n=e.authResponse,r={fbToken:n.accessToken};console.log(n.accessToken),o.CreateUser(r).then(function(e){console.log("create"),window.localStorage.user=angular.toJson(e);var o=new Firebase("https://mustknow.firebaseIO.com");o.authWithCustomToken(e.fireToken,function(e,o){e?console.log("Login Failed!",e):(console.log("subjects"),t.go("tab.subjects"))}),t.go("tab.subjects")},function(e){console.log("Error ",e),alert("error")})},function(e){console.log("Error while performing Facebook login",e)});else{var e={fbToken:"EAAZAMbMtmoBIBAHHzKvk8AewEB55ZAVYLLIr0ofhi6Eyhrnd6aHdOB1gQO3Im86QmqooFAZAHyj0uXAtwWOTXCnFRU6IvvhS4z7JZCZB12h8fTMsxr9JAZAHH40f2aqIodDXlbdIEMHHd6ZA3YHzrLm97jQh6VTha199Qst6u4ukO2mYvO4II5X8ZBTrVmT1yeIZD",notification_token:"b95a00b4-96e0-41c6-9331-fa787a54291b"};o.CreateUser(e).then(function(e){window.localStorage.user=angular.toJson(e);var o=new Firebase("https://mustknow.firebaseIO.com");o.authWithCustomToken(e.fireToken,function(e,o){e?console.log("Login Failed!",e):t.go("tab.subjects")}),t.go("tab.subjects")},function(e){})}}}])}(),function(){appControllers.controller("messagesCtrl",["$scope","$rootScope","$state","$stateParams","$timeout","$firebaseArray","ConfigurationService","MessagesService","UserService","EntityService",function(e,t,o,n,r,s,i,a,c,l){e.$on("sendMessagesEvent",function(t,o){e.messages=a.getMessages(),e.$$phase||e.$apply()}),a.setMessages(),e.goToChat=function(e){var t={conversationId:e.conversationId,fbPhotoUrl:e.fbPhotoUrl,userName:e.userName,subjectName:e.subjectName,desc:e.desc};l.setMessageDetails(t),o.go("chat",{conversationId:e.conversationId})},e.goToUserProfile=function(e){c.SetUserProfile(e),o.go("userProfile")}}])}(),function(){appControllers.controller("myProfileCtrl",["$rootScope","$ionicModal","$ionicPopup","UserService","$firebaseArray","$ionicLoading","$scope","$state","$stateParams","$ionicHistory","EntityService","SubjectService","ConfigurationService",function(e,t,o,n,r,s,i,a,c,l,u,f,d){i.isActive=!1,i.activeButton=function(){i.isActive=!i.isActive},i.userProfile=d.UserDetails(),i.categoriesUrl=d.CategoriesUrl(),i.subjects=[],i.deleteSubject=function(e,t){f.DeleteSubjects(t).then(function(){i.subjects.splice(e,1)},function(e){})},i.logOut=function(){n.LogOut().then(function(){window.localStorage.clear(),d.LogOut(),l.clearHistory(),a.go("login")},function(e){a.go("login")})},i.userProfile=d.UserDetails(),i.categoriesUrl=d.CategoriesUrl(),i.subjects=[],t.fromTemplateUrl("templates/profile/html/editSubject.html",{scope:i,animation:"slide-in-up"}).then(function(e){i.modal=e}),i.currentSubject={},i.currentSubjectIndex=5,i.updateSubject=function(){i.currentSubject&&i.currentSubject.description.length>1&&f.UpdateSubject(i.currentSubject).then(function(){i.subjects[i.currentSubjectIndex]=i.currentSubject,i.modal.hide()},function(e){})},i.deleteSubject=function(e,t){f.DeleteSubjects(t).then(function(){i.subjects.splice(e,1)},function(e){})},i.editSubject=function(e,t){i.currentSubjectIndex=t,i.currentSubject=e,i.modal.show()},i.logOut=function(){n.LogOut().then(function(){window.localStorage.clear(),d.LogOut(),a.go("login")},function(e){a.go("login")})},i.tab="open",i.updateProfile=function(){var e={fbToken:i.userProfile.fbToken};n.CreateUser(e).then(function(e){window.localStorage.user=angular.toJson(e),i.userProfile=d.RefreshUserDetails()},function(e){console.log("Error ",e)})},i.getSubjects=function(e){if(i.tab=e,i.subjects=[],s.show(),"open"==e)f.GetMySubjects(i.userProfile._id,!0).then(function(e){i.subjects=e.subjects,s.hide()},function(e){s.hide()});else if("closed"==e)f.GetMySubjects(i.userProfile._id,!1).then(function(e){i.subjects=e.subjects,s.hide()},function(e){s.hide()});else if("blocked"==e){var t=new Firebase("https://mustknow.firebaseIO.com/chats/"+i.userDetails._id+"/blocked/");i.blockedUsers=r(t),s.hide()}},i.changeStatus=function(e,t,o){i.subjects.splice(t,1),f.ChangeStatus(e,o).then(function(e){},function(e){})},i.getSubjects("open"),i.showConfirm=function(e){var t=o.confirm({title:"Unblock User",template:"Are you sure you want to remove"+e.userName+" from your blocked users?"});t.then(function(t){if(t){var o=new Firebase("https://mustknow.firebaseIO.com/chats/"+i.userDetails._id+"/blocked/"+e.userId);o.remove(),console.log("You are sure")}else console.log("You are not sure")})},i.userDetails=d.UserDetails()}]),appControllers.controller("userProfileCtrl",["$rootScope","$scope","$state","$stateParams","EntityService","SubjectService","UserService",function(e,t,o,n,r,s,i){t.isExpanded=!0,e.isHeaderExpanded=!1,t.userProfile=i.GetUserProfile(),t.first_name=t.userProfile.first_name,t.a=function(){o.go("app.subjects")},t.isAnimated=n.isAnimated,t.subjects=[],s.GetMySubjects(t.userProfile.userId).then(function(e){t.subjects=e},function(e){}),t.goToSetting=function(){o.go("app.expenseSetting")}}]),appControllers.controller("profileSettingCtrl",["$scope","$state","$ionicHistory","$ionicViewSwitcher",function(e,t,o,n){e.navigateTo=function(e,r){o.currentStateName()!=e&&(o.nextViewOptions({disableAnimate:!1,disableBack:!0}),n.nextDirection("back"),t.go(e,{isAnimated:r}))}}])}(),function(){appControllers.controller("subjectsCtrl",["$scope","MessagesService","$ionicScrollDelegate","$ionicModal","$ionicPlatform","$rootScope","$state","$interval","$stateParams","$timeout","SubjectService","EntityService","UserService","MessagesService","ConfigurationService","backcallFactory",function(e,t,o,n,r,s,i,a,c,l,u,f,d,t,g,m){function b(t){u.GetSubjects(!1,e.scrollOptions).then(function(o){var n=[];angular.forEach(o.subjects,function(e){n.push(e)}),e.subjectsCount=o.count,t(n)},function(e){})}function p(){u.GetSubjects(!1,e.scrollOptions).then(function(t){e.subjects=t.subjects,e.subjectsCount=t.count},function(e){})}e.scrollOptions={skip:0,limit:20},e.loadOlderSubjects=function(){e.subjects.length>0&&(e.scrollOptions.skip=e.subjects.length,e.scrollOptions.limit=20),b(function(t){e.subjects=e.subjects.concat(t),e.$broadcast("scroll.infiniteScrollComplete")})},e.moreDataCanBeLoaded=function(){return!(e.subjects.length>=e.subjectsCount)},e.loadNewrSubjects=function(){e.scrollOptions={skip:0,limit:20},b(function(t){e.subjects=[],e.subjects=e.subjects.concat(t),e.$broadcast("scroll.refreshComplete")})},e.subjects=[],u.GetCategories().then(function(e){},function(e){}),r.ready(function(){if(m.backCall(),window.cordova&&"undefined"!=typeof window.plugins.OneSignal&&!g.Notification_token()&&l(function(){window.plugins.OneSignal.getIds(function(e){d.RegisterNotification(e.userId).then(function(e){g.SetNotification_token(e)},function(e){})})},5e3),e.userDetails=g.UserDetails(),e.userDetails){var t=new Firebase("https://mustknow.firebaseIO.com/.info/connected"),o=new Firebase("https://mustknow.firebaseIO.com/presence/"+e.userDetails._id),n=new Firebase("https://mustknow.firebaseIO.com/conversationOnline/"+e.userDetails._id);t.on("value",function(e){e.val()&&(o.onDisconnect().set("offline"),n.onDisconnect().remove(),o.set("online"))})}}),e.checkUndreadMessage=function(){return t.checkUndreadMessage()},e.goToChat=function(e){var t=e.user.first_name+" "+e.user.last_name,o={conversationId:e.user._id+"-"+e._id,userName:t,subjectName:e.title,fbPhotoUrl:e.user.fbPhotoUrl,desc:e.description};f.setMessageDetails(o),i.go("chat")},e.goToUserProfile=function(e){i.go("userProfile",{userId:e.user._id,first_name:e.user.first_name})},e.goToFilter=function(){e.modal.show()},e.goToMessages=function(){i.go("tab.messages")},e.goToAddSubject=function(){i.go("addSubject")},n.fromTemplateUrl("templates/subjects/html/filter.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.modal=t}),e.$on("$destroy",function(){e.modal.remove(),console.log("$destroy")}),e.$on("modal.hidden",function(){console.log("modal hiden"),s.myFilter.categories=[],e.scrollOptions={skip:0,limit:20},u.GetCategories().then(function(t){e.categories=t,angular.forEach(e.categories,function(e,t){e.is_selected&&s.myFilter.categories.push(e._id)}),g.SetMyFilter(s.myFilter),p()},function(e){})}),e.$on("modal.removed",function(){console.log("removed")})}]),appControllers.controller("addSubjectCtrl",["$scope","$ionicLoading","$state","SubjectService","$stateParams","$filter","$ionicHistory","ConfigurationService","$ionicHistory",function(e,t,o,n,r,s,i,a,i){e.isExpanded=!0,e.failed=!1,e.subject={},e.categories=[],e.categoriesUrl=a.CategoriesUrl(),e.initialForm=function(){e.subject={title:"",user:a.UserDetails()._id,description:""},n.GetCategories().then(function(t){e.categories=t},function(e){})},e.createSubjectSetp=function(e){o.go("tab.addSubject-s2",{categoryId:e._id})},e.createSubject=function(){return e.subject.description.length<=0?void(e.failed=!0):(e.subject.category=o.params.categoryId,t.show(),void n.CreateSubject(e.subject).then(function(){t.hide(),i.clearHistory(),o.go("tab.subjects")},function(e){t.hide()}))},e.initialForm()}]),appControllers.controller("filterCtrl",["$scope","$rootScope","$state","$stateParams","$ionicHistory","SubjectService","ConfigurationService",function(e,t,o,n,r,s,i){e.categoriesUrl=i.CategoriesUrl(),e.setGender=function(e){t.myFilter.gender=e},e.selectCategory=function(t){e.categories[t].is_selected?e.categories[t].is_selected=!1:e.categories[t].is_selected=!0},e.initialForm=function(){s.GetCategories().then(function(o){e.categories=o;for(var n=0;n<e.categories.length;n++)t.myFilter.categories.indexOf(e.categories[n]._id)!==-1&&(e.categories[n].is_selected=!0)},function(e){}),t.myFilter=i.MyFilter(),t.myFilter.gender||(t.myFilter={nearMe:!1,gender:"both",categories:[]},i.SetMyFilter(t.myFilter))},e.initialForm()}])}();.success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      UpdateSubject: function (subject) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/subjects',subject, {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      }
    }
  })
})();


(function () {
  appServices.factory('UserService', function ($http, $log, $q, $cordovaFacebook, ConfigurationService) {
    var userProfile = {};
    return {

      CreateUser: function (user) {
        var deferred = $q.defer();

        $http.post(ConfigurationService.ServerUrl() + '/api/users',
          user
          , {
            headers: {
              "Content-Type": "application/json"
            }
          }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      LogOut: function () {
        var deferred = $q.defer();

        $http.get(ConfigurationService.ServerUrl() + '/api/users/logOut', {
          headers: {
            "Content-Type": "application/json",
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      GetUser: function (userId) {
        var deferred = $q.defer();
        $http.get(ConfigurationService.ServerUrl() + '/api/users/' + userId, {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      CheckUser: function (userId) {
        var deferred = $q.defer();
        $http.get(ConfigurationService.ServerUrl() + '/api/users', {
          headers: {
            "access-token": ConfigurationService.UserDetails().token
          }
        }).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      FBlogin: function () {
        var deferred = $q.defer();
        $cordovaFacebook.login(["public_profile", "email", "user_friends", "user_birthday"]).then(
          function success(result) {
            deferred.resolve(result);
          },
          function error(reason) {
            alert(JSON.stringify(reason))
            deferred.reject(reason);
          }
        );
        return deferred.promise;
      },
      RegisterNotification: function (token) {
        var deferred = $q.defer();
        $http.post(ConfigurationService.ServerUrl() + '/api/users/notification',
          {
            "notification_token": token
          },
          {
            headers: {
              "access-token": ConfigurationService.UserDetails().token
            }
          }
        ).success(function (data) {
          deferred.resolve(data);
        }).error(function (msg, code) {
          deferred.reject(msg);
          //   $log.error(msg, code);
        });
        return deferred.promise;
      },
      SetUserProfile: function (message) {
        var createrId = message.conversationId.split("-")[0];
        userProfile.userId = createrId;
        userProfile.first_name = message.userName;

        userProfile.fbPhotoUrl = message.fbPhotoUrl;
      },
      GetUserProfile: function () {
        return userProfile;
      }
    }
  });
})();

(function () {
  appControllers.controller('blockedUsersCtrl', function ($scope, $rootScope,$state,$ionicPopup, $stateParams, $filter,$firebaseArray, $mdBottomSheet, $mdDialog, $mdToast, $ionicHistory,SubjectService,ConfigurationService,Firebase) {
    $scope.isExpanded = true;
    $rootScope.isHeaderExpanded = true;
    $scope.showConfirm = function(blockedUser) {
      var confirmPopup = $ionicPopup.confirm({
        title: 'Unblock User',
        template: 'Are you sure you want to remove'+ blockedUser.userName+' from your blocked users?'
      });
      confirmPopup.then(function(res) {
        if(res) {
          var blockedUserRef=new Firebase("https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id+"/blocked/"+blockedUser.userId);
          blockedUserRef.remove();
          console.log('You are sure');
        } else {
          console.log('You are not sure');
        }
      });
    };
    $scope.userDetails = ConfigurationService.UserDetails();
    // initialForm is the first activity in the controller.
    // It will initial all variable data and let the function works when page load.
    $scope.initialForm = function () {
      var blockedUsersRef=new Firebase("https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id+"/blocked/");
      $scope.blockedUsers=$firebaseArray(blockedUsersRef);
    };// End initialForm.
    $scope.initialForm();
  });
})();// End of Notes Detail Page  Controller.



(function () {
  appControllers.controller('chatCtrl', function ($scope, $ionicPopover, $timeout,$ionicScrollDelegate, $rootScope, $state,$ionicPopup, ConfigurationService, ChatService, UserService, EntityService) {
  var date = new Date();
  $scope.dateString = date.toLocaleDateString();
  $scope.isExpanded = true;
  $rootScope.isHeaderExpanded = true;
  $scope.chatDetails = EntityService.getMessageDetails();
  $scope.conversationId = $scope.chatDetails.conversationId;
  $scope.messages = [];
  var createrId =  $scope.conversationId.split("-")[0];

$scope.bb=function () {

  console.log(666);
}
  $scope.userDetails = ConfigurationService.UserDetails();
  ChatService.setMessages($scope.conversationId);
  $scope.messages = ChatService.getMessages();

  $timeout(function(){
    ChatService.scrollBottom();
  },100)

  window.addEventListener('native.keyboardshow', function(){
    $timeout(function(){
      $ionicScrollDelegate.scrollBottom(false);
    },300)

  });

  $rootScope.$on('sendChatEvent', function(event, mass) {
    $scope.messages = ChatService.getMessages();
    date = new Date();
    $scope.dateString = date.toLocaleDateString();
    if(!$scope.$$phase) {
      $scope.$apply();
    }
  });

    var myblockedUrl = "https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id  + "/blocked/" + createrId;
    var myblockedRef = new Firebase(myblockedUrl);
    myblockedRef.on("value", function (userSnapshot) {
      if (userSnapshot.val()) {
        $scope.disableSend = true;
        $scope.sendInputPlaceHolder = "this user is blocked";
      }
      else{
        $scope.disableSend = false;
        $scope.sendInputPlaceHolder = "Message";
      }
    });
  // $rootScope.$on('otherUserBlock', function(event, mass) {
  //   $timeout(function(){
  //     if(mass){
  //       $scope.sendInputPlaceHolder = "this user is blocked"
  //     }
  //     $scope.disableSend = mass;
  //     $scope.$apply(function(){
  //       console.log("ss")
  //     });
  //   },3000)
  //
  //
  // });
  $scope.blockUser = function () {
    var confirmPopup = $ionicPopup.confirm({
      title: 'Block User',
      template: 'Are you sure you want to block '+ $scope.chatDetails.userName+' ?',
      buttons: [
        { text: 'Cancel' },
        {
          text: '<b>Block</b>',
          type: 'button-positive',
          onTap: function(e) {
            return "sss";
          }
        }
      ]
    });
    confirmPopup.then(function(res) {
      if(res) {
        ChatService.blockUser($scope.chatDetails);
        $state.go("tab.messages");
        $scope.popover.remove();
        console.log('You are sure');
      } else {
        console.log('You are not sure');
      }
    });

  }

  $scope.reportUser=function () {
    $scope.data={is_toBlocked:true,reason:""};
    var confirmPopup = $ionicPopup.show({
      title: 'Report User',
      template: '<textarea cols="4" ng-model="data.reason" placeholder="Give us more details"></textarea>  <ion-checkbox ng-model="data.is_toBlocked" >Also block this user ? </ion-checkbox>',
      scope: $scope,
      buttons: [
        { text: 'Cancel' },
        {
          text: '<b>Report</b>',
          type: 'button-positive',
          onTap: function(e) {
            return {is_toBlocked:$scope.data.is_toBlocked,report:{user:$scope.chatDetails.conversationId.split('-')[1],reason:$scope.data.reason}};
          }
        }
      ]
    });
    confirmPopup.then(function(res) {
      if(res) {
        ChatService.ReportUser(res.report);
        if(res.is_toBlocked)
        {
          ChatService.blockUser($scope.chatDetails);
        }
        $state.go("tab.messages");
        $scope.popover.remove();
        console.log('You are sure');
      } else {
        console.log('You are not sure');
      }
    });

    //ChatService.blockUser($scope.chatDetails);
  }
  $scope.$on('$stateChangeStart',
    function(event, toState, toParams, fromState, fromParams, options){
      conversationUserRef = new Firebase('https://mustknow.firebaseIO.com/conversationOnline/' + $scope.userDetails._id);
      conversationUserRef.remove();
    })

  $scope.messageIsMine = function(userId){
    return $scope.userDetails._id === userId;
  };

  $scope.getBubbleClass = function(userId){
    var classname = 'from-them';
    if($scope.messageIsMine(userId)){
      classname = 'from-me';
    }
    return classname;
  };
  $scope.goToUserProfile = function () {
    UserService.SetUserProfile($scope.chatDetails);
    $state.go('app.userProfile',{userId:createrId })

  }

  $scope.sendMessage = function (msg) {
    date = new Date();
    $scope.dateString = date.toLocaleDateString();

    ChatService.sendMessage(msg, $scope.chatDetails);

    $scope.data.message = "";
  }
    $ionicPopover.fromTemplateUrl('templates/shared/drop-down-menu.html', {
      scope: $scope,
    }).then(function(popover) {
      $scope.popover = popover;
    });



});
appControllers.controller('OnlineUserCtrl', function ($scope,$firebaseObject, ConfigurationService, EntityService) {
  var userDetails = ConfigurationService.UserDetails();
  var chatDetails = EntityService.getMessageDetails();
  var conversationId = chatDetails.conversationId;
  var createrId = conversationId.split("-")[0];
  var isUserOnlineRef = new Firebase('https://mustknow.firebaseIO.com/presence/' + createrId);
  var blockedUrl = "https://mustknow.firebaseIO.com/chats/" + createrId + "/blocked/" + userDetails._id;
  var blockedRef = new Firebase(blockedUrl);
  var blockUser = $firebaseObject(blockedRef);
  blockUser.$loaded(function(value){
    if(value.userId){
      $scope.isUserOnline = false;
    }
    else{
      isUserOnlineRef.on("value", function (userSnapshot) {
        if (userSnapshot.val() && userSnapshot.val() == 'online') {
          $scope.isUserOnline = true;
        }
        else{
          $scope.isUserOnline = false;
        }
      });
    }
  })

})
})();

(function () {
  appControllers.controller('loginCtrl', function ($scope, $state,UserService, $timeout) {
    $scope.fbLogin = function () {
      console.log("fblogin")
      if (window.cordova) {
        UserService.FBlogin().then(function success(s) {
          window.localStorage['fbData'] = angular.toJson(s.authResponse);
          var fbData = s.authResponse;

          var user = {
            fbToken: fbData['accessToken']
          }
          console.log(fbData['accessToken']);
          UserService.CreateUser(user)
            .then(function (user) {
              console.log("create")
              window.localStorage['user'] = angular.toJson(user);
              var ref = new Firebase("https://mustknow.firebaseIO.com");

              ref.authWithCustomToken(user.fireToken, function (error, authData) {

                if (error) {
                  console.log("Login Failed!", error);
                } else {
                  console.log("subjects")

                  $state.go("tab.subjects");
                }
              });
              $state.go("tab.subjects");
            }, function (err) {
              console.log("Error ", err);
              alert("error")
            });
          //alert($scope.FbName)


        }, function error(msg) {
          console.log("Error while performing Facebook login", msg);
        })
      } else {
        var user = {
          fbToken: 'EAAZAMbMtmoBIBAHHzKvk8AewEB55ZAVYLLIr0ofhi6Eyhrnd6aHdOB1gQO3Im86QmqooFAZAHyj0uXAtwWOTXCnFRU6IvvhS4z7JZCZB12h8fTMsxr9JAZAHH40f2aqIodDXlbdIEMHHd6ZA3YHzrLm97jQh6VTha199Qst6u4ukO2mYvO4II5X8ZBTrVmT1yeIZD',
          notification_token: 'b95a00b4-96e0-41c6-9331-fa787a54291b'

        }

        UserService.CreateUser(user)
          .then(function (user) {
            window.localStorage['user'] = angular.toJson(user);
            var ref = new Firebase("https://mustknow.firebaseIO.com");

            ref.authWithCustomToken(user.fireToken, function (error, authData) {

              if (error) {
                console.log("Login Failed!", error);
              } else {
                $state.go("tab.subjects");
              }
            });
            $state.go("tab.subjects");
          }, function (err) {
          });
      }

    };

  });
})();
// End of facebook login controller.

(function () {
appControllers.controller('messagesCtrl', function ($scope, $rootScope, $state, $stateParams, $timeout, $firebaseArray, ConfigurationService, MessagesService, UserService, EntityService) {

  $scope.$on('sendMessagesEvent', function(event, mass) {
    $scope.messages = MessagesService.getMessages();
    if(!$scope.$$phase) {
      $scope.$apply();
    }
  });
  MessagesService.setMessages();
  $scope.goToChat = function (message) {
    var messageDetails = {
      conversationId: message.conversationId,
      fbPhotoUrl: message.fbPhotoUrl,
      userName: message.userName,
      subjectName: message.subjectName,
      desc:message.desc
    }
    EntityService.setMessageDetails(messageDetails);
    $state.go('chat', {conversationId: message.conversationId})
  }

  $scope.goToUserProfile = function (message) {
    UserService.SetUserProfile(message);
    $state.go('userProfile')

  }
});
})();



(function () {
// Controller of expense dashboard page.
appControllers.controller('myProfileCtrl', function ($rootScope,$ionicModal, $ionicPopup,UserService, $firebaseArray, $ionicLoading, $scope,$state,$stateParams,$ionicHistory,EntityService,SubjectService,ConfigurationService) {


  $scope.isActive = false;
  $scope.activeButton = function() {
    $scope.isActive = !$scope.isActive;
  }

  $scope.userProfile = ConfigurationService.UserDetails();// angular.fromJson(window.localStorage['user']);
  $scope.categoriesUrl = ConfigurationService.CategoriesUrl();
  $scope.subjects = [];
  $scope.deleteSubject = function (index, subject) {
    SubjectService.DeleteSubjects(subject)
      .then(function () {
        $scope.subjects.splice(index, 1);
      }, function (err) {
      });
  }

  $scope.logOut = function(){
    UserService.LogOut()
      .then(function () {
        window.localStorage.clear();
        ConfigurationService.LogOut();
        $ionicHistory.clearHistory();
        $state.go('login');
      }, function (err) {
        $state.go('login');
      });
  }
    $scope.userProfile = ConfigurationService.UserDetails();// angular.fromJson(window.localStorage['user']);
    $scope.categoriesUrl = ConfigurationService.CategoriesUrl();
    $scope.subjects = [];
    $ionicModal.fromTemplateUrl('templates/profile/html/editSubject.html', {
      scope: $scope,
      animation: 'slide-in-up'
    }).then(function (modal) {
      $scope.modal = modal;
    });
    $scope.currentSubject = {};
    $scope.currentSubjectIndex =5;
    $scope.updateSubject = function () {
      if ($scope.currentSubject && $scope.currentSubject.description.length > 1) {
        SubjectService.UpdateSubject($scope.currentSubject)
          .then(function () {
            debugger
            $scope.subjects[ $scope.currentSubjectIndex]= $scope.currentSubject;
            $scope.modal.hide();
          }, function (err) {
            debugger

          });
      }
    };
    $scope.deleteSubject = function (index, subject) {

      SubjectService.DeleteSubjects(subject)
        .then(function () {
          $scope.subjects.splice(index, 1);
        }, function (err) {
        });
    }
    $scope.editSubject = function (subject, index) {
      $scope.currentSubjectIndex=index;
      $scope.currentSubject = subject;
      $scope.modal.show();
    }
    $scope.logOut = function () {
      UserService.LogOut()
        .then(function () {
          window.localStorage.clear();
          ConfigurationService.LogOut();
          $state.go('login');
        }, function (err) {
          $state.go('login');
        });
    }

    $scope.tab = 'open';
    $scope.updateProfile = function () {
      var user = {
        fbToken: $scope.userProfile.fbToken
      }
      UserService.CreateUser(user)
        .then(function (user) {
          window.localStorage['user'] = angular.toJson(user);
          $scope.userProfile = ConfigurationService.RefreshUserDetails();
        }, function (err) {
          console.log("Error ", err);
        });
    }
    $scope.getSubjects = function (title) {
      $scope.tab = title;
      $scope.subjects = [];
      $ionicLoading.show();

      if (title == 'open') {
        SubjectService.GetMySubjects($scope.userProfile._id, true)
          .then(function (subjects) {
            $scope.subjects = subjects.subjects;
            $ionicLoading.hide();
          }, function (err) {
            $ionicLoading.hide();
          });
      } else if (title == 'closed') {
        SubjectService.GetMySubjects($scope.userProfile._id, false)
          .then(function (subjects) {
            $scope.subjects = subjects.subjects;
            $ionicLoading.hide();
          }, function (err) {
            $ionicLoading.hide();
          });
      } else if (title == 'blocked') {
        var blockedUsersRef = new Firebase("https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id + "/blocked/");
        $scope.blockedUsers = $firebaseArray(blockedUsersRef);
        $ionicLoading.hide();
      }
    }
    $scope.changeStatus = function (subject, index, status) {
      $scope.subjects.splice(index, 1);
      SubjectService.ChangeStatus(subject, status)
        .then(function (subjects) {

        }, function (err) {
        });
    }
    $scope.getSubjects('open');

    $scope.showConfirm = function (blockedUser) {
      var confirmPopup = $ionicPopup.confirm({
        title: 'Unblock User',
        template: 'Are you sure you want to remove' + blockedUser.userName + ' from your blocked users?'
      });
      confirmPopup.then(function (res) {
        if (res) {
          var blockedUserRef = new Firebase("https://mustknow.firebaseIO.com/chats/" + $scope.userDetails._id + "/blocked/" + blockedUser.userId);
          blockedUserRef.remove();
          console.log('You are sure');
        } else {
          console.log('You are not sure');
        }
      });
    };
    $scope.userDetails = ConfigurationService.UserDetails();

  });

  appControllers.controller('userProfileCtrl', function ($rootScope, $scope, $state, $stateParams, EntityService, SubjectService, UserService) {
    $scope.isExpanded = true;
    $rootScope.isHeaderExpanded = false;
    $scope.userProfile = UserService.GetUserProfile();
    $scope.first_name = $scope.userProfile.first_name;

    $scope.a = function () {
      $state.go('app.subjects');
    }
    $scope.isAnimated = $stateParams.isAnimated;
    //$scope.userProfile = angular.fromJson(window.localStorage['user']);
    $scope.subjects = [];
    SubjectService.GetMySubjects($scope.userProfile.userId)
      .then(function (subjects) {
        $scope.subjects = subjects;
      }, function (err) {
      });


    $scope.goToSetting = function () {
      $state.go("app.expenseSetting");
    };

  });


  appControllers.controller('profileSettingCtrl', function ($scope, $state, $ionicHistory, $ionicViewSwitcher) {

    $scope.navigateTo = function (stateName, objectData) {
      if ($ionicHistory.currentStateName() != stateName) {
        $ionicHistory.nextViewOptions({
          disableAnimate: false,
          disableBack: true
        });

      //Next view animate will display in back direction
      $ionicViewSwitcher.nextDirection('back');

      $state.go(stateName, {
        isAnimated: objectData,
      });
    }
  }; // End of navigateTo.
}); // End of controller expense dashboard setting.
})();

(function () {
  appControllers.controller('subjectsCtrl', function ($scope, MessagesService,$ionicScrollDelegate, $ionicModal, $ionicPlatform, $rootScope, $state, $interval, $stateParams, $timeout, SubjectService, EntityService, UserService, MessagesService, ConfigurationService, backcallFactory) {

    // $scope.$on('sendMessagesEvent', function(event, mass) {
    //   var messages = MessagesService.getMessages();
    //   removeChatSubjects(messages);
    // });
    $scope.scrollOptions = {
      skip: 0,
      limit: 20
    }
    function removeChatSubjects(messages){
      $scope.messagesMap = {};
      angular.forEach(messages, function(message){
        var subjectId = message.conversationId.split('-')[1];
        $scope.messagesMap[subjectId] = true;
      })
      angular.forEach($scope.subjects, function(subject, key){
        if($scope.messagesMap[subject._id]){
          console.log("s");
          $scope.subjects.splice(1,key);
        }

      })
    }
    function loadSubjects(callback){
      SubjectService.GetSubjects(false, $scope.scrollOptions)
        .then(function (subjects) {
          var s = [];
          angular.forEach(subjects.subjects, function(subject){
           s.push(subject);
          })
          $scope.subjectsCount = subjects.count;
          callback(s);


        }, function (err) {
        });
    }

    $scope.loadOlderSubjects = function(){
      if($scope.subjects.length>0 ){
        $scope.scrollOptions.skip = $scope.subjects.length;
        $scope.scrollOptions.limit = 20;
      }

      loadSubjects(function(subjects){
        $scope.subjects = $scope.subjects.concat(subjects);
        $scope.$broadcast('scroll.infiniteScrollComplete');

      })


    }
    $scope.moreDataCanBeLoaded =function(){
      if($scope.subjects.length >= $scope.subjectsCount){
        return false;
      }
      return true;
    }
    $scope.loadNewrSubjects = function(){
      $scope.scrollOptions = {
        skip: 0,
        limit: 20
      }
      loadSubjects(function(subjects){
        $scope.subjects = [];
        $scope.subjects = $scope.subjects.concat(subjects);
        $scope.$broadcast('scroll.refreshComplete');
      })
    }
    $scope.subjects = [];
    SubjectService.GetCategories()
      .then(function (categories) {
      }, function (err) {
      });
    $ionicPlatform.ready(function () {
      //doRefresh();
      backcallFactory.backCall();
      if (window.cordova && typeof window.plugins.OneSignal != 'undefined' && !ConfigurationService.Notification_token()) {
        $timeout(function () {
          window.plugins.OneSignal.getIds(function (ids) {

            UserService.RegisterNotification(ids.userId)
              .then(function (userToken) {
                ConfigurationService.SetNotification_token(userToken);
              }, function (err) {
              });
          });
        }, 5000)
      }
      $scope.userDetails = ConfigurationService.UserDetails();
      if($scope.userDetails){
        var amOnline = new Firebase('https://mustknow.firebaseIO.com/.info/connected');
        var userRef = new Firebase('https://mustknow.firebaseIO.com/presence/' + $scope.userDetails._id);
        var conversationUserRef = new Firebase('https://mustknow.firebaseIO.com/conversationOnline/' + $scope.userDetails._id);
        amOnline.on('value', function(snapshot) {
          if (snapshot.val()) {
            userRef.onDisconnect().set('offline');
            conversationUserRef.onDisconnect().remove();
            userRef.set('online');
          }
        });
      }
    });

    $scope.checkUndreadMessage = function () {
      return MessagesService.checkUndreadMessage();
    }
    function doRefresh() {
      SubjectService.GetSubjects(false, $scope.scrollOptions)
        .then(function (subjects) {
          $scope.subjects = subjects.subjects;
          //MessagesService.setMessages();
          $scope.subjectsCount = subjects.count;
        }, function (err) {
        });
    }



    $scope.goToChat = function (subject) {

      var userName = subject.user.first_name + " " + subject.user.last_name;
      var messageDetails = {
        conversationId: subject.user._id + "-" + subject._id,
        userName: userName,
        subjectName: subject.title,
        fbPhotoUrl: subject.user.fbPhotoUrl,
        desc:subject.description
      }
      EntityService.setMessageDetails(messageDetails);
      $state.go('chat')
    }
    $scope.goToUserProfile = function (subject) {
      //
      //var userName = subject.user.first_name + " " + subject.user.last_name;
      //var messageDetails = {
      //  conversationId: subject.user._id + "-" + subject._id,
      //  userName: userName,
      //  subjectName: subject.title,
      //  fbPhotoUrl: subject.user.fbPhotoUrl
      //}
      //EntityService.setMessageDetails(messageDetails);
      $state.go('userProfile', {userId: subject.user._id, first_name: subject.user.first_name})
    }
    $scope.goToFilter = function () {
      $scope.modal.show();
    }
    $scope.goToMessages = function () {
      $state.go('tab.messages');
    }
    $scope.goToAddSubject = function () {
      $state.go('addSubject');
    }

    $ionicModal.fromTemplateUrl('templates/subjects/html/filter.html', {
      scope: $scope,
      animation: 'slide-in-up'
    }).then(function(modal) {
      $scope.modal = modal;
    });

    $scope.$on('$destroy', function() {
      $scope.modal.remove();
      console.log("$destroy")
    });
    // Execute action on hide modal
    $scope.$on('modal.hidden', function() {
      console.log("modal hiden");
      $rootScope.myFilter.categories = [];
      $scope.scrollOptions = {
        skip: 0,
        limit: 20
      }
      SubjectService.GetCategories()
        .then(function (categories) {
          $scope.categories = categories;
          angular.forEach($scope.categories, function (value, key) {
            if (value.is_selected) {
              $rootScope.myFilter.categories.push(value._id)
            }
          });
          ConfigurationService.SetMyFilter($rootScope.myFilter);
          doRefresh();
        }, function (err) {
        });

    });
    // Execute action on remove modal
    $scope.$on('modal.removed', function() {
      console.log("removed");
    });
  })
  appControllers.controller('addSubjectCtrl', function ($scope, $ionicLoading, $state, SubjectService, $stateParams, $filter, $ionicHistory, ConfigurationService, $ionicHistory) {
    $scope.isExpanded = true;
    $scope.failed = false;

    $scope.subject = {};
    $scope.categories = [];
    $scope.categoriesUrl = ConfigurationService.CategoriesUrl();
    $scope.initialForm = function () {

      $scope.subject = {
        title: '',
        user: ConfigurationService.UserDetails()._id,
        description: ''
      }
      SubjectService.GetCategories()
        .then(function (categories) {
          $scope.categories = categories;
        }, function (err) {
        });

    };
    $scope.createSubjectSetp = function (category) {
      $state.go('tab.addSubject-s2', {categoryId: category._id})
    }
    $scope.createSubject = function () {
      // if ($scope.subject.title.length <= 0 ||
       if($scope.subject.description.length <= 0) {
        $scope.failed = true;
        return;
      }
      $scope.subject.category = $state.params.categoryId;
      $ionicLoading.show();
      SubjectService.CreateSubject($scope.subject)
        .then(function () {
          $ionicLoading.hide();
          $ionicHistory.clearHistory();
          $state.go("tab.subjects");

        }, function (err) {
          $ionicLoading.hide();
        });
    }


    $scope.initialForm();
  });
  appControllers.controller('filterCtrl', function ($scope, $rootScope, $state, $stateParams, $ionicHistory, SubjectService, ConfigurationService) {
    $scope.categoriesUrl = ConfigurationService.CategoriesUrl();

    $scope.setGender =function(gender){
      $rootScope.myFilter.gender = gender;
    }

    $scope.selectCategory = function (categoryIndex) {
      if($scope.categories[categoryIndex].is_selected)
        $scope.categories[categoryIndex].is_selected = false;
      else
        $scope.categories[categoryIndex].is_selected = true;
    }
    $scope.initialForm = function () {
      SubjectService.GetCategories()
        .then(function (categories) {
          $scope.categories = categories;
          for (var i = 0; i < $scope.categories.length; i++) {
            if ($rootScope.myFilter.categories.indexOf($scope.categories[i]._id) !== -1) {
              $scope.categories[i].is_selected = true;
            }
          }
        }, function (err) {
        });

      $rootScope.myFilter = ConfigurationService.MyFilter();
      if (!$rootScope.myFilter.gender) {
        $rootScope.myFilter = {
          nearMe: false,
          gender: 'both',
          categories: []
        }
        ConfigurationService.SetMyFilter($rootScope.myFilter);
      }

    };// End initialForm.
    $scope.initialForm();
  });// End of Notes Detail Page  Controller.

})();
